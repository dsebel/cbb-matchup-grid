{"version":3,"sources":["data/Big_Dance_CSV.csv","data/KP.csv","components/SeedInput.js","components/MatchupGrid.js","components/FilterInput.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","dropdownOptions","value","text","SeedInput","props","Grid","Row","Column","Header","as","columns","width","Dropdown","selection","fluid","options","defaultValue","leftSeed","className","onChange","onLeftSeedDropdownChange","rightSeed","onRightSeedDropdownChange","MARGIN","CHART_WIDTH","CHART_HEIGHT","xScale","yScale","lineGenerator","d3","MatchupGrid","allTeams","Object","values","teams","domain","map","team","range","nice","xTicks","ticks","xOffset","yTicks","yOffset","matchupLines","this","filteredGames","forEach","game","push","key","strokeDasharray","d","teamA","data","adjO","adjD","teamB","matchupPoints","content","year","seed","name","cx","cy","r","style","fill","won","potentialMatchupPoints","potentialMatchups","currentYear","height","transform","stroke","y2","fontSize","textAnchor","x2","React","Component","FilterInput","Checkbox","label","defaultChecked","showPotentialMatchups","onPotentialMatchupsCheckboxChange","Popup","trigger","Icon","color","left","App","state","games","startingYear","endingYear","dataReady","handleLeftSeedUpdate","bind","handleRightSeedUpdate","handlePotentialMatchupsUpdate","loadData","Papa","parse","teamCSV","download","header","skipEmptyLines","dynamicTyping","complete","teamData","teamRow","gameCSV","gameData","gameRow","seedMatchup","sort","setState","filterGames","event","preventDefault","checked","filterPotentialGames","stateSeeds","filter","includes","container","marginTop","dividing","Message","warning","Divider","maxHeight","overflowY","margin","length","fg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e9c1e5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Big_Dance_CSV.96921f42.csv\";","module.exports = __webpack_public_path__ + \"static/media/KP.1a573eb0.csv\";","import React from 'react';\nimport { Dropdown, Grid, Header } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport './SeedInput.css';\n\nconst dropdownOptions = [\n  { value: 1, text: '1' },\n  { value: 2, text: '2' },\n  { value: 3, text: '3' },\n  { value: 4, text: '4' },\n  { value: 5, text: '5' },\n  { value: 6, text: '6' },\n  { value: 7, text: '7' },\n  { value: 8, text: '8' },\n  { value: 9, text: '9' },\n  { value: 10, text: '10' },\n  { value: 11, text: '11' },\n  { value: 12, text: '12' },\n  { value: 13, text: '13' },\n  { value: 14, text: '14' },\n  { value: 15, text: '15' },\n  { value: 16, text: '16' },\n];\n\nfunction SeedInput(props) {\n  return (\n    <Grid.Row>\n      <Grid.Column>\n        <Header as=\"h3\">Seed Select</Header>\n        <Grid columns={3}>\n          <Grid.Column width={7}>\n            <Dropdown\n              selection\n              fluid\n              options={dropdownOptions}\n              defaultValue={props.leftSeed}\n              className=\"seed-dropdown\"\n              onChange={props.onLeftSeedDropdownChange}\n            ></Dropdown>\n          </Grid.Column>\n          <Grid.Column width={2} className=\"vs-text\">\n            vs.\n          </Grid.Column>\n          <Grid.Column width={7}>\n            <Dropdown\n              selection\n              fluid\n              options={dropdownOptions}\n              defaultValue={props.rightSeed}\n              className=\"seed-dropdown\"\n              onChange={props.onRightSeedDropdownChange}\n            ></Dropdown>\n          </Grid.Column>\n        </Grid>\n      </Grid.Column>\n    </Grid.Row>\n  );\n}\n\nSeedInput.propTypes = {\n  leftSeed: PropTypes.number,\n  onLeftSeedDropdownChange: PropTypes.func,\n  onRightSeedDropdownChange: PropTypes.func,\n  rightSeed: PropTypes.number,\n};\n\nexport default SeedInput;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport Tippy from '@tippy.js/react';\nimport PropTypes from 'prop-types';\n\nimport './MatchupGrid.css';\nimport 'tippy.js/dist/tippy.css';\n\n// Constants.\nconst WIDTH = 1200;\nconst HEIGHT = 600;\nconst MARGIN = {\n  top: 40,\n  left: 40,\n  right: 40,\n  bottom: 40,\n};\nconst CHART_WIDTH = WIDTH - (MARGIN.left + MARGIN.right);\nconst CHART_HEIGHT = HEIGHT - (MARGIN.top + MARGIN.bottom);\n\n// Global D3 elements.\nlet xScale = null;\nlet yScale = null;\nconst lineGenerator = d3.line();\n\nclass MatchupGrid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Get teams from props.\n    let allTeams = Object.values(this.props.teams);\n\n    // Create X scale.\n    xScale = d3\n      .scaleLinear()\n      .domain(d3.extent(allTeams.map(team => team['adjO'])))\n      .range([0, CHART_WIDTH])\n      .nice();\n\n    // Create Y scale.\n    yScale = d3\n      .scaleLinear()\n      .domain(d3.extent(allTeams.map(team => team['adjD'])))\n      .range([0, CHART_HEIGHT])\n      .nice();\n  }\n\n  render() {\n    // Create axis ticks.\n    let xTicks = xScale.ticks().map(value => ({\n      value,\n      xOffset: xScale(value),\n    }));\n    let yTicks = yScale.ticks().map(value => ({\n      value,\n      yOffset: yScale(value),\n    }));\n\n    // Create matchup lines.\n    let matchupLines = [];\n    this.props.filteredGames.forEach(game => {\n      matchupLines.push(\n        <path\n          key={game.key}\n          className=\"line\"\n          strokeDasharray=\"3, 3\"\n          d={lineGenerator([\n            [xScale(game.teamA.data.adjO), yScale(game.teamA.data.adjD)],\n            [xScale(game.teamB.data.adjO), yScale(game.teamB.data.adjD)],\n          ])}\n        ></path>\n      );\n    });\n\n    // Create points.\n    let matchupPoints = [];\n    this.props.filteredGames.forEach(game => {\n      [game.teamA, game.teamB].forEach(team => {\n        matchupPoints.push(\n          <Tippy\n            key={team.key}\n            content={`${game.year}: (${team.data.seed}) ${team.data.name}`}\n          >\n            <circle\n              cx={xScale(team.data.adjO)}\n              cy={yScale(team.data.adjD)}\n              r={5}\n              style={{ fill: team.won ? 'green' : 'red' }}\n            ></circle>\n          </Tippy>\n        );\n      });\n    });\n\n    let potentialMatchupPoints = [];\n    this.props.potentialMatchups.forEach(team => {\n      potentialMatchupPoints.push(\n        <Tippy\n          key={team.key}\n          content={`${this.props.currentYear}: (${team.data.seed}) ${team.data.name}`}\n        >\n          <circle\n            cx={xScale(team.data.adjO)}\n            cy={yScale(team.data.adjD)}\n            r={5}\n            style={{ fill: 'purple' }}\n          ></circle>\n        </Tippy>\n      );\n    });\n\n    return (\n      <svg width={WIDTH} height={HEIGHT}>\n        <g transform={`translate(${MARGIN.left}, ${MARGIN.top})`}>\n          <g className=\"line-container\">{matchupLines}</g>\n          <g className=\"point-container\">{matchupPoints}</g>\n          <g className=\"point-container\">{potentialMatchupPoints}</g>\n        </g>\n\n        <g\n          className=\"axis\"\n          transform={`translate(${MARGIN.left}, ${CHART_HEIGHT + MARGIN.top})`}\n        >\n          <path d={`M 0 0 H ${CHART_WIDTH}`} stroke=\"currentColor\"></path>\n\n          {xTicks.map(({ value, xOffset }) => (\n            <g key={value} transform={`translate(${xOffset}, 0)`}>\n              <line y2=\"6\" stroke=\"currentColor\"></line>\n              <text\n                key={value}\n                style={{\n                  fontSize: '10px',\n                  textAnchor: 'middle',\n                  transform: 'translateY(16px)',\n                }}\n              >\n                {value}\n              </text>\n            </g>\n          ))}\n          <text\n            className=\"axis-label\"\n            style={{ textAnchor: 'middle' }}\n            transform={`translate(${CHART_WIDTH / 2}, 35)`}\n          >\n            Adjusted Offensive Efficiency\n          </text>\n        </g>\n\n        <g\n          className=\"axis\"\n          transform={`translate(${MARGIN.left}, ${MARGIN.top})`}\n        >\n          <path d={`M 0 0 V ${CHART_HEIGHT}`} stroke=\"currentColor\"></path>\n          {yTicks.map(({ value, yOffset }) => (\n            <g key={value} transform={`translate(0, ${yOffset})`}>\n              <line x2=\"-6\" stroke=\"currentColor\"></line>\n              <text\n                key={value}\n                style={{\n                  fontSize: '10px',\n                  textAnchor: 'end',\n                  transform: 'translateX(-8px) translateY(3px)',\n                }}\n              >\n                {value}\n              </text>\n            </g>\n          ))}\n          <text\n            className=\"axis-label\"\n            style={{ textAnchor: 'middle' }}\n            transform={`translate(-30, ${CHART_HEIGHT / 2}) rotate(-90)`}\n          >\n            Adjusted Defensive Efficiency\n          </text>\n        </g>\n      </svg>\n    );\n  }\n}\n\nMatchupGrid.propTypes = {\n  teams: PropTypes.object,\n  filteredGames: PropTypes.array,\n  currentYear: PropTypes.number,\n\n  showPotentialMatchups: PropTypes.bool,\n  potentialMatchups: PropTypes.array,\n};\n\nexport default MatchupGrid;\n","import React from 'react';\nimport { Checkbox, Grid, Header, Icon, Popup } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nfunction FilterInput(props) {\n  return (\n    <Grid.Row>\n      <Grid.Column>\n        <Header as=\"h3\">Filters</Header>\n        <Grid columns={3}>\n          <Grid.Column>\n            <Checkbox\n              label=\"Show Potential Matchups\"\n              defaultChecked={props.showPotentialMatchups}\n              onChange={props.onPotentialMatchupsCheckboxChange}\n            />{' '}\n            <Popup\n              trigger={<Icon name=\"info circle\" color=\"blue\" />}\n              content=\"Show teams with the selected seeds for the current year.\"\n              style={{ left: '-12px' }}\n            />\n          </Grid.Column>\n          <Grid.Column></Grid.Column>\n          <Grid.Column></Grid.Column>\n        </Grid>\n      </Grid.Column>\n    </Grid.Row>\n  );\n}\n\nFilterInput.propTypes = {\n  startingYear: PropTypes.number,\n  endingYear: PropTypes.number,\n  showPotentialMatchups: PropTypes.bool,\n  onPotentialMatchupsCheckboxChange: PropTypes.func,\n};\n\nexport default FilterInput;\n","import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport { Divider, Grid, Header, Message } from 'semantic-ui-react';\n\nimport SeedInput from './SeedInput';\nimport MatchupGrid from './MatchupGrid';\nimport FilterInput from './FilterInput';\n\nimport './App.css';\nimport gameCSV from '../data/Big_Dance_CSV.csv';\nimport teamCSV from '../data/KP.csv';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // All games, grouped by sorted seed matchups.\n      games: [],\n\n      // Filtered games, all games currently selected.\n      filteredGames: [],\n\n      // Potential games, used for just the seeds (not matchups).\n      potentialMatchups: [],\n\n      // Team lookup - can lookup by team name - year keys.\n      teams: {},\n\n      // The current season based on tourney year (e.g. 2019-2020 season is\n      // 2020).\n      currentYear: 2019, // pretend that 2019 is the current year\n\n      // Selected seeds.\n      leftSeed: 1,\n      rightSeed: 1,\n\n      // Chart filter options.\n      startingYear: 2010,\n      endingYear: 2019,\n      showPotentialMatchups: false,\n\n      // Data status variables. Used to indicate if data is ready or not.\n      dataReady: false,\n    };\n\n    this.handleLeftSeedUpdate = this.handleLeftSeedUpdate.bind(this);\n    this.handleRightSeedUpdate = this.handleRightSeedUpdate.bind(this);\n    this.handlePotentialMatchupsUpdate = this.handlePotentialMatchupsUpdate.bind(\n      this\n    );\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  loadData() {\n    Papa.parse(teamCSV, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: teamData => {\n        // Get the team data.\n        let teams = {};\n        teamData.data.forEach(teamRow => {\n          const key = `${teamRow['Team']}-${teamRow['Year']}`;\n          teams[key] = {\n            year: teamRow['Year'],\n            seed: teamRow['Seed'],\n            name: teamRow['Team'],\n            adjO: teamRow['AdjO'],\n            adjD: teamRow['AdjD'],\n          };\n        });\n\n        // Now load matches and embed team data into matches.\n        Papa.parse(gameCSV, {\n          download: true,\n          header: true,\n          skipEmptyLines: true,\n          dynamicTyping: true,\n          complete: gameData => {\n            let games = [];\n            gameData.data.forEach(gameRow => {\n              // Filter out years we don't support.\n              if (gameRow['Year'] < 2010) {\n                return;\n              }\n\n              // Only extract the data we plan on using.\n              games.push({\n                key: `${gameRow['Year']}-${gameRow['Team A']}-${gameRow['Team B']}`,\n                year: gameRow['Year'],\n                seedMatchup: [gameRow['Seed A'], gameRow['Seed B']].sort(),\n                teamA: {\n                  data: teams[`${gameRow['Team A']}-${gameRow['Year']}`],\n                  won: gameRow['Score A'] > gameRow['Score B'],\n                  key: `${gameRow['Year']}-${gameRow['Team A']}-${gameRow['Team B']}`,\n                },\n                teamB: {\n                  data: teams[`${gameRow['Team B']}-${gameRow['Year']}`],\n                  won: gameRow['Score B'] > gameRow['Score A'],\n                  key: `${gameRow['Year']}-${gameRow['Team B']}-${gameRow['Team A']}`,\n                },\n              });\n            });\n            this.setState({ teams, games, dataReady: true }, this.filterGames);\n          },\n        });\n      },\n    });\n  }\n\n  handleLeftSeedUpdate(event, data) {\n    event.preventDefault();\n    this.setState({ leftSeed: data.value }, this.filterGames);\n  }\n\n  handleRightSeedUpdate(event, data) {\n    event.preventDefault();\n    this.setState({ rightSeed: data.value }, this.filterGames);\n  }\n\n  handlePotentialMatchupsUpdate(event, data) {\n    event.preventDefault();\n    this.setState(\n      { showPotentialMatchups: data.checked },\n      this.filterPotentialGames\n    );\n  }\n\n  filterGames() {\n    const stateSeeds = [this.state.leftSeed, this.state.rightSeed].sort();\n    const filteredGames = this.state.games.filter(game => {\n      return (\n        game.seedMatchup[0] === stateSeeds[0] &&\n        game.seedMatchup[1] === stateSeeds[1]\n      );\n    });\n    this.setState({ filteredGames });\n  }\n\n  filterPotentialGames() {\n    let potentialMatchups = [];\n    if (this.state.showPotentialMatchups) {\n      const stateSeeds = [this.state.leftSeed, this.state.rightSeed].sort();\n      this.state.games.forEach(game => {\n        if (game.year === this.state.currentYear) {\n          if (stateSeeds.includes(game.teamA.data.seed)) {\n            potentialMatchups.push(game.teamA);\n          }\n          if (stateSeeds.includes(game.teamB.data.seed)) {\n            potentialMatchups.push(game.teamB);\n          }\n        }\n      });\n    }\n    this.setState({ potentialMatchups });\n  }\n\n  render() {\n    return (\n      <Grid container style={{ marginTop: '20px' }}>\n        <Grid.Row>\n          <Grid.Column>\n            <Header as=\"h1\" dividing>\n              CBB Matchup Grid\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row>\n          <Grid.Column>\n            <Message warning>\n              <b>Note:</b> Currently only includes data from 2010-2019.\n            </Message>\n          </Grid.Column>\n        </Grid.Row>\n\n        <SeedInput\n          leftSeed={this.state.leftSeed}\n          onLeftSeedDropdownChange={this.handleLeftSeedUpdate}\n          rightSeed={this.state.rightSeed}\n          onRightSeedDropdownChange={this.handleRightSeedUpdate}\n        ></SeedInput>\n\n        <Divider />\n\n        <Grid.Row style={{ maxHeight: '400px', overflowY: 'scroll' }}>\n          <Grid.Column>\n            <ul style={{ margin: '0' }}>\n              {this.state.filteredGames.length > 0 &&\n                this.state.filteredGames.map(fg => (\n                  <li key={fg.key}>\n                    {fg.year}: {fg.teamA.data.seed} {fg.teamA.data.name} vs{' '}\n                    {fg.teamB.data.seed} {fg.teamB.data.name}\n                  </li>\n                ))}\n              {this.state.filteredGames.length === 0 && (\n                <li>No matchups with given seeds found.</li>\n              )}\n            </ul>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Divider />\n\n        <FilterInput\n          startingYear={this.state.startingYear}\n          endingYear={this.state.endingYear}\n          showPotentialMatchups={this.state.showPotentialMatchups}\n          onPotentialMatchupsCheckboxChange={this.handlePotentialMatchupsUpdate}\n        ></FilterInput>\n\n        <Grid.Row>\n          <Grid.Column>\n            {this.state.dataReady && (\n              <MatchupGrid\n                teams={this.state.teams}\n                filteredGames={this.state.filteredGames}\n                currentYear={this.state.currentYear}\n                showPotentialMatchups={this.state.showPotentialMatchups}\n                potentialMatchups={this.state.potentialMatchups}\n              ></MatchupGrid>\n            )}\n          </Grid.Column>\n        </Grid.Row>\n\n        <Divider />\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}