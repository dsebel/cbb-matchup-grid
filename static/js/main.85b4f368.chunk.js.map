{"version":3,"sources":["data/Big_Dance_CSV.csv","components/SeedInput.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","dropdownOptions","value","text","SeedInput","props","Grid","Row","Column","Header","as","columns","width","Dropdown","selection","fluid","options","defaultValue","leftSeed","className","onChange","onLeftSeedDropdownChange","rightSeed","onRightSeedDropdownChange","App","state","games","filteredGames","handleLeftSeedUpdate","bind","handleRightSeedUpdate","this","loadGames","Papa","parse","gameData","download","header","skipEmptyLines","dynamicTyping","complete","result","data","forEach","row","seedKey","push","setState","filterGames","event","preventDefault","container","style","marginTop","dividing","Divider","maxHeight","overflowY","margin","length","map","fg","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85b4f368.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Big_Dance_CSV.0b19038c.csv\";","import React from 'react';\nimport { Dropdown, Grid, Header } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport './SeedInput.css';\n\nconst dropdownOptions = [\n  { value: 1, text: '1' },\n  { value: 2, text: '2' },\n  { value: 3, text: '3' },\n  { value: 4, text: '4' },\n  { value: 5, text: '5' },\n  { value: 6, text: '6' },\n  { value: 7, text: '7' },\n  { value: 8, text: '8' },\n  { value: 9, text: '9' },\n  { value: 10, text: '10' },\n  { value: 11, text: '11' },\n  { value: 12, text: '12' },\n  { value: 13, text: '13' },\n  { value: 14, text: '14' },\n  { value: 15, text: '15' },\n  { value: 16, text: '16' },\n];\n\nfunction SeedInput(props) {\n  return (\n    <Grid.Row>\n      <Grid.Column>\n        <Header as=\"h3\">Seed Select</Header>\n        <Grid columns={3}>\n          <Grid.Column width={7}>\n            <Dropdown\n              selection\n              fluid\n              options={dropdownOptions}\n              defaultValue={props.leftSeed}\n              className=\"seed-dropdown\"\n              onChange={props.onLeftSeedDropdownChange}\n            ></Dropdown>\n          </Grid.Column>\n          <Grid.Column width={2} className=\"vs-text\">\n            vs.\n          </Grid.Column>\n          <Grid.Column width={7}>\n            <Dropdown\n              selection\n              fluid\n              options={dropdownOptions}\n              defaultValue={props.rightSeed}\n              className=\"seed-dropdown\"\n              onChange={props.onRightSeedDropdownChange}\n            ></Dropdown>\n          </Grid.Column>\n        </Grid>\n      </Grid.Column>\n    </Grid.Row>\n  );\n}\n\nSeedInput.propTypes = {\n  leftSeed: PropTypes.number,\n  onLeftSeedDropdownChange: PropTypes.func,\n  rightSeed: PropTypes.number,\n  onRightSeedDropdownChange: PropTypes.func,\n};\n\nexport default SeedInput;\n","import React, { Component } from 'react';\nimport Papa from 'papaparse';\nimport { Divider, Grid, Header } from 'semantic-ui-react';\n\nimport SeedInput from './SeedInput';\nimport './App.css';\nimport gameData from '../data/Big_Dance_CSV.csv';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // All games, grouped by sorted seed matchups.\n      games: {},\n\n      // Filtered games, all games currently selected.\n      filteredGames: [],\n\n      // Selected seeds.\n      leftSeed: 1,\n      rightSeed: 1,\n    };\n\n    this.handleLeftSeedUpdate = this.handleLeftSeedUpdate.bind(this);\n    this.handleRightSeedUpdate = this.handleRightSeedUpdate.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadGames();\n  }\n\n  loadGames() {\n    Papa.parse(gameData, {\n      download: true,\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      complete: result => {\n        // Load games into a JS object, using the sorted seed values as keys\n        // for easier lookup.\n        let games = {};\n        result.data.forEach(row => {\n          const seedKey =\n            row['Seed A'] <= row['Seed B']\n              ? `${row['Seed A']}-${row['Seed B']}`\n              : `${row['Seed B']}-${row['Seed A']}`;\n          games[seedKey] ? games[seedKey].push(row) : (games[seedKey] = [row]);\n        });\n        this.setState({ games }, this.filterGames);\n      },\n    });\n  }\n\n  handleLeftSeedUpdate(event, data) {\n    event.preventDefault();\n    this.setState({ leftSeed: data.value }, this.filterGames);\n  }\n\n  handleRightSeedUpdate(event, data) {\n    event.preventDefault();\n    this.setState({ rightSeed: data.value }, this.filterGames);\n  }\n\n  filterGames() {\n    const seedKey =\n      this.state.leftSeed <= this.state.rightSeed\n        ? `${this.state.leftSeed}-${this.state.rightSeed}`\n        : `${this.state.rightSeed}-${this.state.leftSeed}`;\n    let filteredGames = [];\n    if (this.state.games[seedKey]) {\n      filteredGames = this.state.games[seedKey];\n    }\n    this.setState({ filteredGames });\n  }\n\n  render() {\n    return (\n      <Grid container style={{ marginTop: '20px' }}>\n        <Grid.Row>\n          <Grid.Column>\n            <Header as=\"h1\" dividing>\n              CBB Matchup Grid\n            </Header>\n          </Grid.Column>\n        </Grid.Row>\n\n        <SeedInput\n          leftSeed={this.state.leftSeed}\n          onLeftSeedDropdownChange={this.handleLeftSeedUpdate}\n          rightSeed={this.state.rightSeed}\n          onRightSeedDropdownChange={this.handleRightSeedUpdate}\n        ></SeedInput>\n\n        <Divider />\n\n        <Grid.Row style={{ maxHeight: '400px', overflowY: 'scroll' }}>\n          <Grid.Column>\n            <ul style={{ margin: '0' }}>\n              {this.state.filteredGames.length > 0 &&\n                this.state.filteredGames.map(fg => (\n                  <li key={`${fg['Year']}-${fg['Team A']}-${fg['Team B']}`}>\n                    {fg['Year']}: {fg['Seed A']} {fg['Team A']} vs{' '}\n                    {fg['Seed B']} {fg['Team B']}\n                  </li>\n                ))}\n              {this.state.filteredGames.length === 0 && (\n                <li>No matchups with given seeds found.</li>\n              )}\n            </ul>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Divider />\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}